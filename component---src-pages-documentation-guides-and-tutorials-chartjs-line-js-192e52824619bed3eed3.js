(self.webpackChunkweblab=self.webpackChunkweblab||[]).push([[908],{15284:function(e,t,a){"use strict";a.r(t),a.d(t,{default:function(){return v}});var n,l=a(67294),o=a(82858),i=a(39871),r=a(65186),s=a(79981),c=a(36311),d=a(51079),h=a(27293),p=a(9641),u=JSON.parse('{"nbformat":4,"nbformat_minor":0,"metadata":{"kernel_info":{"name":"Weblab"},"language_info":{"name":"javascript"}},"cells":[{"cell_type":"markdown","metadata":{},"source":["# Line plots with Chart.js\\n\\nWhen you are working with data it can be very helpful to plot the data you are working with. In this example we will use the [Chart.js](https://www.chartjs.org/) library to create a line plot from 1D data. The following cell imports all requirements to create a LineChart and registers them in the Chart class."],"outputs":[{"output_type":"display_data","metadata":{},"data":{"text/plain":"<h1>Line plots with Chart.js</h1>\\n<p>When you are working with data it can be very helpful to plot the data you are working with. In this example we will use the <a href=\\"https://www.chartjs.org/\\">Chart.js</a> library to create a line plot from 1D data. The following cell imports all requirements to create a LineChart and registers them in the Chart class.</p>\\n"}}]},{"cell_type":"code","execution_count":0,"metadata":{},"source":["import { Chart, LineController, LineElement, PointElement, LinearScale, CategoryScale, Title} from \\"https://cdn.jsdelivr.net/npm/chart.js@3.2.1/dist/chart.esm.js\\";\\n\\nChart.register(LineController, LineElement, PointElement, LinearScale, CategoryScale, Title);"],"outputs":[{"output_type":"display_data","metadata":{},"data":{"text/plain":""}}]},{"cell_type":"markdown","metadata":{},"source":["As a next step we need a ```<canvas>``` element into which Chart.js will plot the data. Weblab provides the ```document.createElement()``` method to create HTML Elements. To be able to later refer to the created canvas, we set the ```id``` of the HTML Element to ```\\"myChart\\"```. Additionally we set the height to 400px. Finally, we let Weblab display the element by returning it as the last expression in the cell."],"outputs":[{"output_type":"display_data","metadata":{},"data":{"text/plain":"<p>As a next step we need a <code>&lt;canvas&gt;</code> element into which Chart.js will plot the data. Weblab provides the <code>document.createElement()</code> method to create HTML Elements. To be able to later refer to the created canvas, we set the <code>id</code> of the HTML Element to <code>&quot;myChart&quot;</code>. Additionally we set the height to 400px. Finally, we let Weblab display the element by returning it as the last expression in the cell.</p>\\n"}}]},{"cell_type":"markdown","metadata":{},"source":[""],"outputs":[{"output_type":"display_data","metadata":{},"data":{"text/plain":""}}]},{"cell_type":"code","execution_count":0,"metadata":{},"source":["var canvas = document.createElement(\\"canvas\\")\\ncanvas.id = \\"myChart\\"\\ncanvas.height = 400\\ncanvas"],"outputs":[{"output_type":"display_data","metadata":{},"data":{"text/plain":""}}]},{"cell_type":"markdown","metadata":{},"source":["Now that we have a canvas into which Chart.js can plot the data we can create the plot. This is done by creating a new ```Chart``` object and specifying the name ```\\"myChart\\"``` of our canvas element. When you execute the following cell, it should create a plot in the existing canvas element."],"outputs":[{"output_type":"display_data","metadata":{},"data":{"text/plain":"<p>Now that we have a canvas into which Chart.js can plot the data we can create the plot. This is done by creating a new <code>Chart</code> object and specifying the name <code>&quot;myChart&quot;</code> of our canvas element. When you execute the following cell, it should create a plot in the existing canvas element.</p>\\n"}}]},{"cell_type":"markdown","metadata":{},"source":[""],"outputs":[{"output_type":"display_data","metadata":{},"data":{"text/plain":""}}]},{"cell_type":"code","execution_count":0,"metadata":{},"source":["let myLineChart = new Chart(\\"myChart\\", {\\n    type: \'line\',\\n    data: {\\n  labels: [\'January\', \'February\', \'March\', \'April\', \'May\', \'June\', \'July\'],\\n  datasets: [{\\n    label: \'My First Dataset\',\\n    data: [65, 59, 80, 81, 56, 55, 40],\\n    fill: false,\\n    borderColor: \'rgb(75, 192, 192)\',\\n    tension: 0.1\\n  }]\\n},\\n  options: {\\n    maintainAspectRatio: false,\\n  }\\n});\\n"],"outputs":[{"output_type":"display_data","metadata":{},"data":{"text/plain":""}}]}]}'),m=p.dq(u);0===m.TAG?n=m._0:(alert(s.e(m._0)),n=i.Sy(1,h.fK(void 0,void 0,void 0,void 0,void 0,void 0,void 0)));var y=o.nI(i.Su(n,(function(e,t){return e}))),w=c.nI(i.Su(n,(function(e,t){return[e,t]})));function b(e){var t=e.location;return l.createElement(l.Fragment,void 0,l.createElement(r.q,{children:l.createElement("meta",{content:"Create line plots with Chart.js.",name:"description"})}),l.createElement(d.Sy,{location:t,name:"chartjs_line_plot.ipynb",initialIndices:y,initialCells:w}))}b.displayName="TFJSExample1";var v=b}}]);
//# sourceMappingURL=component---src-pages-documentation-guides-and-tutorials-chartjs-line-js-192e52824619bed3eed3.js.map