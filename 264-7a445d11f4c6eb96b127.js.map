{"version":3,"sources":["webpack://weblab/../markdown/pkg/weblab_markdown_bg.js"],"names":["WASM_VECTOR_LEN","cachegetUint8Memory0","getUint8Memory0","buffer","wasm","Uint8Array","cachedTextEncoder","TextEncoder","module","require","encodeString","encodeInto","arg","view","buf","encode","set","read","length","written","cachegetInt32Memory0","getInt32Memory0","Int32Array","cachedTextDecoder","TextDecoder","ignoreBOM","fatal","markdown","input","retptr","ptr0","malloc","realloc","undefined","ptr","subarray","len","mem","offset","code","charCodeAt","slice","passStringToWasm0","len0","r0","r1","decode"],"mappings":"+cAEA,IAAIA,EAAkB,EAElBC,EAAuB,KAC3B,SAASC,IAIL,OAH6B,OAAzBD,GAAiCA,EAAqBE,SAAWC,kBACjEH,EAAuB,IAAII,WAAWD,kBAEnCH,EAGX,IAEIK,EAAoB,IAFoB,oBAAhBC,aAA8B,EAAIC,EAAOC,SAAS,QAAQF,YAAcA,aAE3D,SAEnCG,EAAwD,mBAAjCJ,EAAkBK,WACzC,SAAUC,EAAKC,GACjB,OAAOP,EAAkBK,WAAWC,EAAKC,IAEvC,SAAUD,EAAKC,GACjB,IAAMC,EAAMR,EAAkBS,OAAOH,GAErC,OADAC,EAAKG,IAAIF,GACF,CACHG,KAAML,EAAIM,OACVC,QAASL,EAAII,SA0CrB,IAAIE,EAAuB,KAC3B,SAASC,IAIL,OAH6B,OAAzBD,GAAiCA,EAAqBjB,SAAWC,kBACjEgB,EAAuB,IAAIE,WAAWlB,kBAEnCgB,EAGX,IAEIG,EAAoB,IAFoB,oBAAhBC,aAA8B,EAAIhB,EAAOC,SAAS,QAAQe,YAAcA,aAE3D,QAAS,CAAEC,WAAW,EAAMC,OAAO,IAWrE,SAASC,EAASC,GACrB,IACI,IAAMC,EAASzB,mCAAsC,IACjD0B,EA9DZ,SAA2BlB,EAAKmB,EAAQC,GAEpC,QAAgBC,IAAZD,EAAuB,CACvB,IAAMlB,EAAMR,EAAkBS,OAAOH,GAC/BsB,EAAMH,EAAOjB,EAAII,QAGvB,OAFAhB,IAAkBiC,SAASD,EAAKA,EAAMpB,EAAII,QAAQF,IAAIF,GACtDd,EAAkBc,EAAII,OACfgB,EAUX,IAPA,IAAIE,EAAMxB,EAAIM,OACVgB,EAAMH,EAAOK,GAEXC,EAAMnC,IAERoC,EAAS,EAENA,EAASF,EAAKE,IAAU,CAC3B,IAAMC,EAAO3B,EAAI4B,WAAWF,GAC5B,GAAIC,EAAO,IAAM,MACjBF,EAAIH,EAAMI,GAAUC,EAGxB,GAAID,IAAWF,EAAK,CACD,IAAXE,IACA1B,EAAMA,EAAI6B,MAAMH,IAEpBJ,EAAMF,EAAQE,EAAKE,EAAKA,EAAME,EAAsB,EAAb1B,EAAIM,QAC3C,IAAML,EAAOX,IAAkBiC,SAASD,EAAMI,EAAQJ,EAAME,GAG5DE,GAFY5B,EAAaE,EAAKC,GAEhBM,QAIlB,OADAnB,EAAkBsC,EACXJ,EA2BQQ,CAAkBd,EAAOxB,oBAAwBA,sBACxDuC,EAAO3C,EACXI,WAAcyB,EAAQC,EAAMa,GAC5B,IAAIC,EAAKvB,IAAkBQ,EAAS,EAAI,GACpCgB,EAAKxB,IAAkBQ,EAAS,EAAI,GACxC,OAfoBK,EAeMU,EAfDR,EAeKS,EAd3BtB,EAAkBuB,OAAO5C,IAAkBiC,SAASD,EAAKA,EAAME,IAOtE,QASIhC,kCAAqC,IACrCA,kBAAqBwC,EAAIC,GAlBjC,IAA4BX,EAAKE,EAFjCb,EAAkBuB","file":"264-7a445d11f4c6eb96b127.js","sourcesContent":["import * as wasm from './weblab_markdown_bg.wasm';\n\nlet WASM_VECTOR_LEN = 0;\n\nlet cachegetUint8Memory0 = null;\nfunction getUint8Memory0() {\n    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory0;\n}\n\nconst lTextEncoder = typeof TextEncoder === 'undefined' ? (0, module.require)('util').TextEncoder : TextEncoder;\n\nlet cachedTextEncoder = new lTextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length);\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len);\n\n    const mem = getUint8Memory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3);\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nlet cachegetInt32Memory0 = null;\nfunction getInt32Memory0() {\n    if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachegetInt32Memory0;\n}\n\nconst lTextDecoder = typeof TextDecoder === 'undefined' ? (0, module.require)('util').TextDecoder : TextDecoder;\n\nlet cachedTextDecoder = new lTextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n/**\n* @param {string} input\n* @returns {string}\n*/\nexport function markdown(input) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        var ptr0 = passStringToWasm0(input, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.markdown(retptr, ptr0, len0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_free(r0, r1);\n    }\n}\n\n"],"sourceRoot":""}